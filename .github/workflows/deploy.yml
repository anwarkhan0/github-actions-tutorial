name: CI/CD to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install deps & run tests
        run: |
          npm install
          npm test
      
      - name: Debug AWS Region Secret
      run: |
        # Check if the secret is non-empty. This will NOT log the secret's value.
        if [ -z "${{ secrets.AWS_REGION }}" ]; then
          echo "::error::Secret AWS_REGION is empty or not found. Check repository/environment secrets."
          exit 1
        else
          # Since the secret is not empty, it will resolve to a masked string (e.g., '***') in the logs.
          echo "AWS_REGION is set and ready to use."
        fi
      shell: bash

    - name: Debug AWS Access Key ID Secret
      run: |
        # Check if the Access Key ID secret is non-empty. This confirms it is accessible.
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "::error::Secret AWS_ACCESS_KEY_ID is empty or not found. This credential is required."
          exit 1
        else
          echo "AWS_ACCESS_KEY_ID is set and ready to use."
        fi
      shell: bash



      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: me-south-1

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image to ECR
        run: |
          IMAGE_TAG=latest
          ECR_URI=${{ steps.ecr-login.outputs.registry }}/github-actions-ec2:$IMAGE_TAG
          docker build -t $ECR_URI .
          docker push $ECR_URI
          echo "image=$ECR_URI" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: build-test-push

    steps:
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ env.image }}
            docker stop api || true
            docker rm api || true
            docker run -d -p 80:3000 --name api ${{ env.image }}
